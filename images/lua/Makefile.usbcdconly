#
# MakingThings -  Makefile for the Make Controller
#

# the name for your project...will result in PROJECT_NAME.bin
PROJECT_NAME = kernel
# set DEBUG to -g to include debug info, otherwise leave blank
DEBUG_OPTS = 
# available optimization levels: -O0, -O1, -O2, -O3, -Os
OPTIMIZATION = -Os

CORE = ../../core
FREERTOS = ../../core/freertos
LWIP = ../../core/lwip
USB = ../../core/usb
MAKINGTHINGS = ../../core/makingthings
LIBRARIES = ../../libraries
STARTUP = ../../core/startup
DEBUG = ../../core/debug
PERIPHERALS = ../../core/peripherals
BOARD = ../../core/board
UTILS = ../../core/utils
LUA = ../../core/lua/src
SCREEN = ../../core/screen
YABCSP = ../../core/yabcsp/src

# Source files that can be built in THUMB mode.
#$(MAKINGTHINGS)/SAM7_EMAC.c

#  $(LUA)/luac.c
#  $(LUA)/lua.c
#  $(MAKINGTHINGS)/usbserial.c

THUMB_SRC= \
  ../../core/startup/extras.c \
  $(FREERTOS)/tasks.c \
  $(FREERTOS)/queue.c \
  $(FREERTOS)/list.c \
  $(FREERTOS)/portable/GCC/ARM7_AT91SAM7S/port.c \
  $(FREERTOS)/portable/MemMang/heap_3.c \
  $(LWIP)/src/core/tcp_out.c \
  $(LWIP)/src/core/ipv4/inet.c \
  $(LWIP)/src/core/mem.c \
  $(LWIP)/src/core/memp.c \
  $(LWIP)/src/core/netif.c \
  $(LWIP)/src/core/pbuf.c \
  $(LWIP)/src/core/raw.c \
  $(LWIP)/src/core/stats.c \
  $(LWIP)/src/core/sys.c \
  $(LWIP)/src/core/tcp.c \
  $(LWIP)/src/core/tcp_in.c \
  $(LWIP)/src/core/init.c \
  $(LWIP)/src/core/ipv4/ip.c \
  $(LWIP)/src/core/ipv4/ip_addr.c \
  $(LWIP)/src/core/ipv4/icmp.c \
  $(LWIP)/src/core/ipv4/inet_chksum.c \
  $(LWIP)/src/core/dhcp.c \
  $(LWIP)/src/core/dns.c \
  $(LWIP)/src/api/tcpip.c \
  $(LWIP)/src/api/api_msg.c \
  $(LWIP)/src/api/err.c \
  $(LWIP)/src/api/netbuf.c \
  $(LWIP)/src/api/api_lib.c \
  $(LWIP)/src/netif/etharp.c \
  $(LWIP)/contrib/port/FreeRTOS/AT91SAM7X/sys_arch.c \
  $(LWIP)/src/core/udp.c \
  $(LWIP)/src/core/ipv4/ip_frag.c \
  $(USB)/device/cdc-serial/CDCDSerialDriver.c \
  $(USB)/device/cdc-serial/CDCDSerialDriverDescriptors.c \
  $(USB)/device/core/USBDCallbacks_Initialized.c \
  $(USB)/device/core/USBDCallbacks_Reset.c \
  $(USB)/device/core/USBDCallbacks_Resumed.c \
  $(USB)/device/core/USBDCallbacks_Suspended.c \
  $(USB)/device/core/USBDDriverCb_CfgChanged.c \
  $(USB)/device/core/USBDDriverCb_IfSettingChanged.c \
  $(USB)/device/core/USBDDriver.c \
  $(USB)/common/core/USBSetAddressRequest.c \
  $(USB)/common/core/USBGenericDescriptor.c \
  $(USB)/common/core/USBGenericRequest.c \
  $(USB)/common/core/USBGetDescriptorRequest.c \
  $(USB)/common/core/USBSetConfigurationRequest.c \
  $(USB)/common/core/USBFeatureRequest.c \
  $(USB)/common/core/USBEndpointDescriptor.c \
  $(USB)/common/core/USBConfigurationDescriptor.c \
  $(USB)/common/core/USBInterfaceRequest.c \
  $(USB)/common/cdc/CDCSetControlLineStateRequest.c \
  $(USB)/common/cdc/CDCLineCoding.c \
  $(PERIPHERALS)/serial.c \
  $(PERIPHERALS)/oled/oled.c \
  $(PERIPHERALS)/spi.c \
  $(PERIPHERALS)/pmc/pmc.c \
  $(UTILS)/rprintf.c \
  $(UTILS)/time.c \
  $(UTILS)/delay.c \
  $(SCREEN)/screen.c \
  $(SCREEN)/font.c \
  $(LUA)/lapi.c \
  $(LUA)/lauxlib.c \
  $(LUA)/lbaselib.c \
  $(LUA)/lcode.c \
  $(LUA)/ldblib.c \
  $(LUA)/ldebug.c \
  $(LUA)/ldo.c \
  $(LUA)/ldump.c \
  $(LUA)/lfunc.c \
  $(LUA)/lgc.c \
  $(LUA)/linit.c \
  $(LUA)/liolib.c \
  $(LUA)/llex.c \
  $(LUA)/lmathlib.c \
  $(LUA)/lmem.c \
  $(LUA)/loadlib.c \
  $(LUA)/lobject.c \
  $(LUA)/lopcodes.c \
  $(LUA)/loslib.c \
  $(LUA)/lparser.c \
  $(LUA)/lstate.c \
  $(LUA)/lstring.c \
  $(LUA)/lstrlib.c \
  $(LUA)/ltable.c \
  $(LUA)/ltablib.c \
  $(LUA)/ltm.c \
  $(LUA)/lundump.c \
  $(LUA)/lvm.c \
  $(LUA)/lzio.c \
  $(LUA)/print.c \
  $(MAKINGTHINGS)/rtos.c \
  $(MAKINGTHINGS)/usbserial.c \
  $(MAKINGTHINGS)/serial.c \
  $(MAKINGTHINGS)/main.c \
  $(MAKINGTHINGS)/io.c \
  $(MAKINGTHINGS)/led.c \
  $(MAKINGTHINGS)/lua.c \
  $(CORE)/sdcard/sdcard.c \
  $(CORE)/fat/fat.c \
  $(CORE)/fatfs/ff.c \
  $(CORE)/fatfs/disk.c \
  make.c

#$(MAKINGTHINGS)/spi.cpp
#$(MAKINGTHINGS)/rtos.cpp
#$(STARTUP)/extras_cpp.cpp
CPP_THUMB_SRC = 

# Source files that must be built in ARM mode.
#$(MAKINGTHINGS)/SAM7_EMAC_ISR.c \

ARM_SRC= \
  $(FREERTOS)/portable/GCC/ARM7_AT91SAM7S/portISR.c \
  $(USB)/device/core/USBD_UDP.c \
  $(MAKINGTHINGS)/serial_isr.c \
  $(MAKINGTHINGS)/io_isr.c
  
CPP_ARM_SRC =


# All the include directories need to be appended here
#-I$(UTILS)
INCLUDEDIRS = \
-I.  \
-I$(CORE) \
-I$(MAKINGTHINGS)  \
-I$(LIBRARIES)/appled  \
-I$(LIBRARIES)/digitalin  \
-I$(LIBRARIES)/digitalout  \
-I$(LIBRARIES)/dipswitch  \
-I$(LIBRARIES)/motor  \
-I$(LIBRARIES)/pwmout  \
-I$(LIBRARIES)/servo  \
-I$(LIBRARIES)/stepper  \
-I$(LIBRARIES)/webserver  \
-I$(LIBRARIES)/xbee  \
-I$(LWIP)/src/include  \
-I$(LWIP)/contrib/port/FreeRTOS/AT91SAM7X  \
-I$(FREERTOS)/include  \
-I$(FREERTOS)/portable/GCC/ARM7_AT91SAM7S  \
-I$(LWIP)/src/include/ipv4 \
-I$(USB)/device/cdc-serial \
-I$(USB)/device/core \
-I$(USB)/common/core \
-I$(USB)/common/cdc \
-I$(BOARD) \
-I$(LUA) \
-I$(CORE)/fatfs \
-I$(CORE)/memories \
-I$(DEBUG)

############################################################################
# Below here should not change from project to project

CC=arm-elf-gcc
CPP=arm-elf-g++
OBJCOPY=arm-elf-objcopy
ARCH=arm-elf-ar
CRT0=$(STARTUP)/AT91SAM7_Startup.s $(STARTUP)/crt0.s
LDSCRIPT=$(STARTUP)/dynawa.ld

# flags common to both c and c++
C_AND_CPP_FLAGS = \
$(INCLUDEDIRS) \
-Wall  \
-Wextra  \
-Wno-strict-aliasing  \
-fno-builtin-printf \
-D SAM7_GCC  \
-D THUMB_INTERWORK \
-D__FLASH_BUILD \
-Dusb_CDCMSD \
-DSUPERVISOR_START \
-mthumb-interwork \
-mcpu=arm7tdmi  \
-T$(LDSCRIPT) \
$(DEBUG_OPTS)  \
$(OPTIMIZATION)

CFLAGS = ${C_AND_CPP_FLAGS}
CFLAGS += -Wmissing-prototypes -Wmissing-declarations

CPPFLAGS = ${C_AND_CPP_FLAGS}
CPPFLAGS += -fno-rtti -fno-exceptions -fno-unwind-tables

THUMB_FLAGS=-mthumb
LINKER_FLAGS=-N -Xlinker -ooutput/$(PROJECT_NAME).elf -Xlinker -M -Xlinker -Map=output/$(PROJECT_NAME)_o.map

ARM_OBJ = $(ARM_SRC:.c=.o)
THUMB_OBJ = $(THUMB_SRC:.c=.o)
CPP_THUMB_OBJ = $(CPP_THUMB_SRC:.cpp=.o)
CPP_ARM_OBJ = $(CPP_ARM_SRC:.cpp=.o)

all: output/$(PROJECT_NAME).bin
  
output/$(PROJECT_NAME).bin : output/$(PROJECT_NAME).elf
	$(OBJCOPY) output/$(PROJECT_NAME).elf -O binary output/$(PROJECT_NAME).bin
	
output/$(PROJECT_NAME).elf : $(ARM_OBJ) $(THUMB_OBJ) $(CPP_ARM_OBJ) $(CPP_THUMB_OBJ) $(CRT0)
	$(CC) $(CFLAGS) $(ARM_OBJ) $(THUMB_OBJ) $(CPP_ARM_OBJ) $(CPP_THUMB_OBJ) -nostartfiles -x assembler-with-cpp $(CRT0) $(LINKER_FLAGS) -lm

$(THUMB_OBJ) : %.o : %.c config.h
	$(CC) -c $(THUMB_FLAGS) $(CFLAGS) $< -o $@

$(CPP_THUMB_OBJ) : %.o : %.cpp config.h
	$(CPP) -c $(THUMB_FLAGS) $(CPPFLAGS) $< -o $@

$(ARM_OBJ) : %.o : %.c config.h
	$(CC) -c $(CFLAGS) $< -o $@

$(CPP_ARM_OBJ) : %.o : %.cpp config.h
	$(CPP) -c $(CPPFLAGS) $< -o $@

clean :
	#rm -f $(ARM_OBJ)
	#rm -f $(THUMB_OBJ)
	#rm -f $(CPP_ARM_OBJ)
	#rm -f $(CPP_THUMB_OBJ)
	find ../.. -name '*.o' -exec rm {} \;
	rm -f output/$(PROJECT_NAME).elf
	rm -f output/$(PROJECT_NAME).bin
	rm -f output/$(PROJECT_NAME)_o.map


